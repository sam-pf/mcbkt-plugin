{"version":3,"sources":["webpack:///./src/App.vue","webpack:///./src/components/panel.vue","webpack:///./src/components/map_table_h.vue"],"names":[],"mappings":"AAkBA,KACA,8CACA,mCACA,kCACA,kBACA,cACA,eACA,kBAEA,gBACA,qBCmKA,8BACA,eAGA,wCACA,gBACA,2BACA,0BACA,gBACA,mBACA,cACA,iBAGA,kCACA,gBAGA,yBACA,WAGA,yBACA,aAGA,yBACA,aAGA,mBACA,cCnKA,uBACA,qBACA,qBAGA,wCACA,iBACA,kBAGA,oBACA,eAGA,oBACA,eAGA,kCACA,mBAGA,mCACA,mBAGA,mBACA","file":"static/css/app.47f8f3826204762eb2d29dcb52cdd0ad.css","sourcesContent":["<template>\n  <div id=\"app\">\n    <div id=\"app-innerframe\">\n      <router-view></router-view>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  created () {\n    //// var codap_phone = new iframePhone.IframePhoneRpcEndpoint ()\n  },\n  name: 'app'\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 5px;\n  margin-bottom: 5px;\n}\n#app-innerframe {\n  display: inline-block;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// ./src/App.vue?18104566","<!-- <<< template block -->\n<template>\n  <div class=\"mcbkt-panel\">\n    <p class=\"explain_cluster\">{{ body_tooltip_cur_plus }}</p>\n    <h1>{{ heading | capitalize_all }}</h1>\n    <h2 class='curact'>Current {{ unit_activity_type | capitalize }}</h2>\n    <map_table_h :data=\"curitems\" :body_tooltip=\"body_tooltip_cur\">\n    </map_table_h>\n    <h2 class='preact'>Previous {{ unit_activity_type | capitalize | pluralize }}</h2>\n    <map_table_h :data=\"previtems\"> </map_table_h>\n    <h2 class='allact'>All {{ unit_activity_type | capitalize | pluralize }}</h2>\n    <map_table_h :data=\"allitems\"> </map_table_h>\n  </div>\n</template>\n<!-- >>> template block -->\n<!-- <<< script block -->\n<script>\nimport Pluralize from 'pluralize'\nimport MapTableH from './map_table_h.vue'\n\nfunction _capitalize (val) {\n  return val.charAt (0).toUpperCase () + val.slice (1)\n}\n\nexport default {\n  name: 'mckbt-panel',\n  components: {\n    'map_table_h': MapTableH,\n  },\n  props: {\n    unit_activity_type: {\n      default: 'level',\n      type: String,\n    },\n    heading: {\n      default: 'Real time MCBKT',\n      type: String,\n    },\n    curitem_keys: {\n      default: function () {\n        return ['id', 'cluster', 'time', 'npts'] // 'passed?'\n      },\n      type: Array\n    },\n    allitems_keys: {\n      default: function () {\n        return ['time', 'npts']\n      },\n      type: Array\n    }\n  },\n  data () {\n    return {\n      all_data: [ // \"just for demo\": will be deleted on creation (see below)\n        {'id': 1, 'cluster': 'A', 'time': 30, 'npts': 5},\n        {'id': 2, 'cluster': 'B', 'time': 50, 'npts': 10},\n        {'id': 3, 'cluster': 'C', 'time': 100, 'npts': 10}\n      ]\n    }\n  },\n  computed: {\n    body_tooltip_cur: {\n      get: function () {\n        const d = this.all_data\n        if (! d) return ''\n        if (d.length)\n          return d [d.length - 1].tooltip || ''\n        return ''\n      },\n      set: function () {}\n    },\n    body_tooltip_cur_plus: {\n      get: function () {\n        const btc = this.body_tooltip_cur\n        if (btc.startsWith ('A') || btc.startsWith ('B') ||\n              btc.startsWith ('E'))\n          return 'GREAT! ' + btc\n        else if (btc.startsWith ('C'))\n          return 'Good! ' + btc\n        else\n          return btc\n      },\n      set: function () {}\n    },\n    curitems: {\n      get: function () {\n        const d = this.all_data\n        const keys = this.curitem_keys\n        var ans = []\n        if (d.length) {\n          const m = d [d.length - 1]\n          for (const key of keys)\n            ans.push ([key, m [key] || ''])\n        } else {\n          for (const key of keys)\n            ans.push ([key, ''])\n        }\n        return ans\n      },\n      set: function () {}\n    },\n    previtems: {\n      get: function () {\n        const d = this.all_data\n        const keys = this.curitem_keys\n        var ans = []\n        for (const key of keys) {\n          let a = []\n          for (let i = 0; i < d.length - 1; i++)\n            a.push (d [i][key])\n          ans.push ([key + (key.endsWith ('s')?'': 's'), a])\n        }\n        return ans\n      },\n      set: function () {}\n    },\n    allitems: {\n      get: function () {\n        const d = this.all_data\n        const keys = this.allitems_keys\n        var ans = []\n        for (const key of keys) {\n          let s = 0\n          for (let i = 0; i < d.length; i++)\n            s += d [i][key]\n          ans.push ([key, s? s: \"\"])\n        }\n        return ans\n      },\n      set: function () {}\n    }\n  },\n  created () {\n    this.all_data = []\n    window.mcbkt_fit_consumer = data => {\n      const times = data.times || []\n      // console.log ('times = ' + JSON.stringify (times))\n      const cluster = data.cluster || ''\n      // console.log ('cluster = ' + cluster)\n      const reffv_list = data.reffv_list || []\n      // console.log ('reffv_list = ' + JSON.stringify (reffv_list))\n      // TODO: do a better job of timing?  3 is an estimated \"play time\"\n      const npts = times.length\n      // console.log ('npts = ' + npts)\n      const time = npts? Math.round (times [npts - 1] - times [0] + 3) : ''\n      // console.log ('time = ' + time)\n      const id = reffv_list.length? reffv_list [reffv_list.length - 1] : ''\n      // console.log ('id = ' + id)\n      // console.log ('this.all_data = ' + JSON.stringify (this.all_data))\n      let prev_reffv_list = []\n      for (const m of this.all_data)\n        prev_reffv_list.push (m.id)\n      // console.log ('prev_reffv_list = ' + JSON.stringify (prev_reffv_list))\n      const cluster_long = data.cluster_long || ''\n      const cluster_desc = data.cluster_description || ''\n      let tooltip = ''\n      if (cluster_long && cluster_desc)\n        tooltip = cluster_long + ' : ' + cluster_desc\n      let old_data\n      if (reffv_list.join (',') === prev_reffv_list.join (','))\n        old_data = this.all_data.slice (0, this.all_data.length - 1)\n      else\n        old_data = this.all_data\n      this.all_data = old_data.concat ({'id': id, 'cluster': cluster,\n          'time': time, 'npts': npts, 'tooltip': tooltip})\n    }\n  },\n  methods: {\n    // no methods have been found necessary just yet...\n    add_new_data () {\n    },\n    replace_last_data () {\n    },\n    unregister_logdata_listener () {\n    },\n    register_mcbkt_client (logdata_provider) {\n    },\n    unregister_mcbkt_client (logdata_provider) {\n    },\n  },\n  filters: {\n    capitalize: _capitalize,\n    pluralize: val => Pluralize (val, 10),\n    capitalize_all: val => val.split (\" \").map (_capitalize).join (\" \"),\n  }\n}\n</script>\n<!-- >>> script block -->\n<!-- <<< style block, scoped -->\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.mcbkt-panel {\n  font-size: 15px;\n}\n\nh1, h2 {\n  font-weight: normal;\n  -webkit-margin-before: 0.1em;\n  -webkit-margin-after: 0.1em;\n  margin-top: 0.1em;\n  margin-bottom: 0.1em;\n  padding-top: 0px;\n  padding-bottom: 0px;\n}\n\n.explain_cluster {\n  max-width: 300px;\n}\n\n.curact {\n  color: blue;\n}\n\n.preact {\n  color: tomato;\n}\n\n.allact {\n  color: purple;\n}\n\na {\n  color: #42b983;\n}\n</style>\n<!-- >>> style block, scoped -->\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/panel.vue?56ea9b4e","<!-- <<< template block -->\n<template>\n  <table class=\"table map_table_h\">\n    <thead>\n      <tr>\n        <th v-for=\"key in keys\">{{ '' + key }}</th>\n      </tr>\n    </thead>\n    <tbody :title=\"body_tooltip\">\n      <tr>\n        <td v-for=\"val in vals\">{{ '' + val }}</td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n<!-- >>> template block -->\n<!-- <<< script block -->\n<script>\nexport default {\n  name: 'map_table_h',\n  props: {\n    data: {\n      type: null,\n      default: function () {\n        return [['key 1', 'value 1'], ['key 2', 'value 2'], ['k3']]\n      },\n      validator: function (val) {\n        if ( val [Symbol.iterator] == undefined ) {\n          console.log ('data must be an iterable.')\n          return false\n        }\n        // Detailed checkes on Set or Array data: deleted (unnecessary, I\n        // think) on 08-25-2017.\n        return true\n      },\n    },\n    body_tooltip: {\n      type: String,\n      default: ''\n    }\n  },\n  data () { return {} },\n  computed: {\n    map: function () {\n      return new Map (this.data)\n    },\n    keys: function () {\n      return Array.from (this.map.keys ()).map (x => '' + x)\n    },\n    vals: function () {\n      return Array.from (this.map.values ()).map (x=> '' + x)\n    },\n  },\n}\n</script>\n<!-- >>> script block -->\n<!-- <<< style block, scoped -->\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\ntable {\n  display: inline-block;\n  border-spacing: 0px 2px;\n}\n\nth, td {\n  padding: 2px 10px;\n  text-align: center;\n}\n\nth {\n  font-size: 120%;\n}\n\ntd {\n  font-size: 110%;\n}\n\nth:nth-child(even) {\n  background: #e5ebff;\n}\n\nth:nth-child(odd) {\n  background: #f1ece9;\n}\n\na {\n  color: #42b983;\n}\n</style>\n<!-- >>> style block, scoped -->\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/map_table_h.vue?57575bb4"],"sourceRoot":""}